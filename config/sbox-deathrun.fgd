// 
// SBoxDeathrun.Entities.Traps.Platforms.MovingPlatform : Sandbox.ModelEntity 
// 
@PointClass tags( SupportsSolids ) model() drawangles( movedir, movedir_islocal ) = deathrun_moving_platform : ""
[
	model(studio) [report]: "World Model" : "" : "The model this entity should use."
	skin(materialgroup) [ group="Render Properties" ] : "Skin" : "default" : "Some models have multiple versions of their textures, called skins." 
	bodygroups(bodygroupchoices) [ group="Render Properties" ] : "Body Groups" : "" : "Some models have multiple variations of certain items, such as characters having different hair styles, etc."
	rendercolor(color255) : "FX Color (R G B)" : "255 255 255" : "The FX color is used by the selected Render Mode."
	renderamt(integer) [ group="Render Properties" ] : "FX Amount (0 - 255)" : 255 : "The FX amount is used by the selected Render Mode."
	targetname(target_source) : "Name" : : "The name that other entities refer to this entity by."
	parentname(target_destination) [ group="Hierarchy" ] : "Parent" : : "The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent."
	movedir(angle) : "Move Direction" :  : ""
	movedir_islocal(boolean) : "Move Direction is Expressed in Local Space" : 1 : ""
	movedir_type(choices) : "Movement Type" : 3 : "" = [
		3 : "Moving"
		1 : "Rotating"
		4 : "Rotating Continious"
	]
	movedistance(float) : "Move Distance" : 100 : ""
	speed(float) : "Speed" : 64 : ""
	timetohold(float) : "Time To Hold" : 0 : ""
	spawnsettings(flags) : "Spawn Settings" :  : "" = [
		1 : "Starts Moving" : 1
		2 : "Loop Movement" : 0
	]
	startmovesound(sound) [ group="Sounds" ] : "Start Move Sound" :  : ""
	stopmovesound(sound) [ group="Sounds" ] : "Stop Move Sound" :  : ""
	moving_sound(sound) [ group="Sounds" ] : "Moving Sound" :  : ""
	enable_shadows(boolean) [ group="Render Properties" ] : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input StartMoving(void) : ""
	input StartMovingForward(void) : ""
	input StartMovingBackwards(void) : ""
	input ReverseMoving(void) : ""
	input StopMoving(void) : ""
	input ToggleMoving(void) : ""
	input SetSpeed(float) : ""
	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."

	output OnReachedStart(void) : ""
	output OnReachedEnd(void) : ""
]

// 
// SBoxDeathrun.Entities.Triggers.Trap : Sandbox.Entity 
// 
@PointClass 
metadata
{
	entity_tool_name = "Deathrun Trap"
	entity_tool_group = "Deathrun Sbox"
	entity_tool_tip = "A entity to store information about a trap"
}
= deathrun_trap : ""
[
	targetname(target_source) : "Name" : : "The name that other entities refer to this entity by."
	parentname(target_destination) [ group="Hierarchy" ] : "Parent" : : "The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent."
	number(integer) : "Number" : 0 : ""
	trapcamera(string) : "Trap Camera" :  : ""
	enable_shadows(boolean) [ group="Render Properties" ] : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"
]

// 
// SBoxDeathrun.Entities.Triggers.TrapCamera : Sandbox.Entity 
// 
@PointClass editormodel( "models/editor/camera.vmdl" ) frustum( 80, 10, 80000, Color )
metadata
{
	entity_tool_name = "Deathrun Trap Camera"
	entity_tool_group = "Deathrun Sbox"
	entity_tool_tip = "A camera for a trap"
}
= deathrun_trap_camera : ""
[
	targetname(target_source) : "Name" : : "The name that other entities refer to this entity by."
	parentname(target_destination) [ group="Hierarchy" ] : "Parent" : : "The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent."
	color(color255) : "Color" :  : ""
	enable_shadows(boolean) [ group="Render Properties" ] : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"
]

// 
// SBoxDeathrun.Entities.Triggers.InstantKillTrigger : Sandbox.BaseTrigger 
// 
@SolidClass 
metadata
{
	entity_tool_name = "Deathrun Trigger Kill"
	entity_tool_group = "Deathrun Sbox"
	entity_tool_tip = "Instant kill trigger"
	auto_apply_material = "materials/tools/toolstrigger.vmat"
}
= deathrun_trigger_kill : ""
[
	targetname(target_source) : "Name" : : "The name that other entities refer to this entity by."
	parentname(target_destination) [ group="Hierarchy" ] : "Parent" : : "The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent."
	startdisabled(boolean) : "Start Disabled" : 0 : "Should this entity start disabled?"
	enable_shadows(boolean) [ group="Render Properties" ] : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"
	spawnflags(flags) = [
		1 : "Clients" : 1
		2 : "Npcs" : 0
		4 : "Pushables" : 0
		8 : "Physics Objects" : 0
		16 : "Allied Npcs" : 0
		32 : "Client In Vehicle" : 0
		64 : "Everything" : 0
		512 : "Client Not In Vehicle" : 0
		1024 : "Physics Debris" : 0
	]

	input Enable(void) : "Enables this trigger"
	input Disable(void) : "Disables this trigger"
	input Toggle(void) : "Toggles this trigger between enabled and disabled states"
	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."

	output OnStartTouch(void) : "Fired when an entity starts touching this trigger. The touching entity must pass this trigger's filters to cause this output to fire."
	output OnEndTouch(void) : "Fired when an entity stops touching this trigger. Only entities that passed this trigger's filters will cause this output to fire."
	output OnStartTouchAll(void) : "Fired when an entity starts touching this trigger while no other passing entities are touching it."
	output OnEndTouchAll(void) : "Fired when all entities touching this trigger have stopped touching it."
]

// 
// SBoxDeathrun.Entities.Points.InitialSpectatorPoint : Sandbox.Entity 
// 
@PointClass editormodel( "models/editor/camera.vmdl" ) frustum( Fov, ZNear, ZFar, Color )
metadata
{
	entity_tool_name = "Deathrun Initial Spectator Point"
	entity_tool_group = "Deathrun Sbox"
	entity_tool_tip = "Defines a point what a spectator will see on first join"
}
= deathrun_initial_spectator_point : ""
[
	targetname(target_source) : "Name" : : "The name that other entities refer to this entity by."
	parentname(target_destination) [ group="Hierarchy" ] : "Parent" : : "The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent."
	fov(integer) : "Fov" : 80 : ""
	znear(integer) : "Znear" : 10 : ""
	zfar(integer) : "Zfar" : 80000 : ""
	color(color255) : "Color" :  : ""
	enable_shadows(boolean) [ group="Render Properties" ] : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"
]

// 
// SBoxDeathrun.Entities.Points.SpawnPoint : Sandbox.Entity 
// 
@PointClass editormodel( "models/editor/playerstart.vmdl" ) 
metadata
{
	entity_tool_name = "Deathrun Player Spawnpoint"
	entity_tool_group = "Deathrun Sbox"
	entity_tool_tip = "Defines a point where the player can (re)spawn"
}
= deathrun_spawn_point : ""
[
	targetname(target_source) : "Name" : : "The name that other entities refer to this entity by."
	parentname(target_destination) [ group="Hierarchy" ] : "Parent" : : "The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent."
	team(choices) : "The team this spawn point is for" : 0 : "" = [
		0 : "SPECTATOR"
		1 : "DEATH"
		2 : "RUNNER"
	]
	enable_shadows(boolean) [ group="Render Properties" ] : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"
]

// 
// SBoxDeathrun.Entities.Paths.DeathCameraPath : Sandbox.BasePathEntity 
// 
@PathClass = deathrun_death_camera_path : ""
[
	targetname(target_source) : "Name" : : "The name that other entities refer to this entity by."
	parentname(target_destination) [ group="Hierarchy" ] : "Parent" : : "The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent."
	enable_shadows(boolean) [ group="Render Properties" ] : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"
]

// 
// SBoxDeathrun.Weapon.Types.Pistol : SBoxDeathrun.Weapon.Weapon 
// 
@PointClass = deathrun_weapon_pistol : ""
[
	targetname(target_source) : "Name" : : "The name that other entities refer to this entity by."
	parentname(target_destination) [ group="Hierarchy" ] : "Parent" : : "The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent."
	enable_shadows(boolean) [ group="Render Properties" ] : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

